/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace BaseObject {
  export type SizeStruct = {
    x: BigNumberish;
    y: BigNumberish;
    z: BigNumberish;
  };

  export type SizeStructOutput = [number, number, number] & {
    x: number;
    y: number;
    z: number;
  };
}

export interface BaseObjectInterface extends utils.Interface {
  functions: {
    "allObjects(uint256)": FunctionFragment;
    "baseMetadataURI()": FunctionFragment;
    "changeTokenPrice(uint256,uint256)": FunctionFragment;
    "created(uint256)": FunctionFragment;
    "getBaseMetadataURI()": FunctionFragment;
    "getCreator(uint256)": FunctionFragment;
    "getMaxClaimed(uint256)": FunctionFragment;
    "getSize(uint256)": FunctionFragment;
    "getTokenURI(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner(address)": FunctionFragment;
    "removeOwner(address)": FunctionFragment;
    "royalityFee()": FunctionFragment;
    "setCreator(uint256,address)": FunctionFragment;
    "setMaxClaimed(uint256,uint256)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setRoyalityFee(uint256)": FunctionFragment;
    "setSize(uint256,(uint8,uint8,uint8))": FunctionFragment;
    "setTokenURI(uint256,string)": FunctionFragment;
    "setTreasuryAddress(address)": FunctionFragment;
    "setbaseMetadataURI(string)": FunctionFragment;
    "symbol()": FunctionFragment;
    "treasuryAddress()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allObjects"
      | "baseMetadataURI"
      | "changeTokenPrice"
      | "created"
      | "getBaseMetadataURI"
      | "getCreator"
      | "getMaxClaimed"
      | "getSize"
      | "getTokenURI"
      | "name"
      | "owner"
      | "removeOwner"
      | "royalityFee"
      | "setCreator"
      | "setMaxClaimed"
      | "setOwner"
      | "setRoyalityFee"
      | "setSize"
      | "setTokenURI"
      | "setTreasuryAddress"
      | "setbaseMetadataURI"
      | "symbol"
      | "treasuryAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allObjects",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "baseMetadataURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeTokenPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "created",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseMetadataURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxClaimed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values: [string]): string;
  encodeFunctionData(functionFragment: "removeOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "royalityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCreator",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxClaimed",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setRoyalityFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSize",
    values: [BigNumberish, BaseObject.SizeStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setbaseMetadataURI",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "treasuryAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "allObjects", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseMetadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "created", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBaseMetadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCreator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMaxClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royalityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCreator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRoyalityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setbaseMetadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAddress",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipGranted(address,address)": EventFragment;
    "OwnershipRemoved(address,address)": EventFragment;
    "Sale(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sale"): EventFragment;
}

export interface OwnershipGrantedEventObject {
  operator: string;
  target: string;
}
export type OwnershipGrantedEvent = TypedEvent<
  [string, string],
  OwnershipGrantedEventObject
>;

export type OwnershipGrantedEventFilter =
  TypedEventFilter<OwnershipGrantedEvent>;

export interface OwnershipRemovedEventObject {
  operator: string;
  target: string;
}
export type OwnershipRemovedEvent = TypedEvent<
  [string, string],
  OwnershipRemovedEventObject
>;

export type OwnershipRemovedEventFilter =
  TypedEventFilter<OwnershipRemovedEvent>;

export interface SaleEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type SaleEvent = TypedEvent<
  [string, string, BigNumber],
  SaleEventObject
>;

export type SaleEventFilter = TypedEventFilter<SaleEvent>;

export interface BaseObject extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BaseObjectInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allObjects(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BaseObject.SizeStructOutput,
        string,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        tokenURI: string;
        size: BaseObject.SizeStructOutput;
        creator: string;
        maxClaimed: BigNumber;
        price: BigNumber;
        forSale: boolean;
      }
    >;

    baseMetadataURI(overrides?: CallOverrides): Promise<[string]>;

    changeTokenPrice(
      tokenId: BigNumberish,
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    created(arg0: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    getBaseMetadataURI(overrides?: CallOverrides): Promise<[string]>;

    getCreator(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMaxClaimed(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSize(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BaseObject.SizeStructOutput]>;

    getTokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(
      targetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeOwner(
      oldOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    royalityFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    setCreator(
      tokenId: BigNumberish,
      _creator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxClaimed(
      tokenId: BigNumberish,
      newMaxClaimed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRoyalityFee(
      _royalityFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSize(
      tokenId: BigNumberish,
      _size: BaseObject.SizeStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenURI(
      tokenId: BigNumberish,
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setbaseMetadataURI(
      baseuri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    treasuryAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  allObjects(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BaseObject.SizeStructOutput,
      string,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      tokenURI: string;
      size: BaseObject.SizeStructOutput;
      creator: string;
      maxClaimed: BigNumber;
      price: BigNumber;
      forSale: boolean;
    }
  >;

  baseMetadataURI(overrides?: CallOverrides): Promise<string>;

  changeTokenPrice(
    tokenId: BigNumberish,
    _newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  created(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  getBaseMetadataURI(overrides?: CallOverrides): Promise<string>;

  getCreator(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getMaxClaimed(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSize(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BaseObject.SizeStructOutput>;

  getTokenURI(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(
    targetAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeOwner(
    oldOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  royalityFee(overrides?: CallOverrides): Promise<BigNumber>;

  setCreator(
    tokenId: BigNumberish,
    _creator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxClaimed(
    tokenId: BigNumberish,
    newMaxClaimed: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRoyalityFee(
    _royalityFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSize(
    tokenId: BigNumberish,
    _size: BaseObject.SizeStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenURI(
    tokenId: BigNumberish,
    _uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasuryAddress(
    _treasuryAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setbaseMetadataURI(
    baseuri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  treasuryAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    allObjects(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BaseObject.SizeStructOutput,
        string,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        tokenURI: string;
        size: BaseObject.SizeStructOutput;
        creator: string;
        maxClaimed: BigNumber;
        price: BigNumber;
        forSale: boolean;
      }
    >;

    baseMetadataURI(overrides?: CallOverrides): Promise<string>;

    changeTokenPrice(
      tokenId: BigNumberish,
      _newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    created(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    getBaseMetadataURI(overrides?: CallOverrides): Promise<string>;

    getCreator(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMaxClaimed(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSize(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BaseObject.SizeStructOutput>;

    getTokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(targetAddress: string, overrides?: CallOverrides): Promise<boolean>;

    removeOwner(oldOwner: string, overrides?: CallOverrides): Promise<void>;

    royalityFee(overrides?: CallOverrides): Promise<BigNumber>;

    setCreator(
      tokenId: BigNumberish,
      _creator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxClaimed(
      tokenId: BigNumberish,
      newMaxClaimed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    setRoyalityFee(
      _royalityFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSize(
      tokenId: BigNumberish,
      _size: BaseObject.SizeStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenURI(
      tokenId: BigNumberish,
      _uri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setbaseMetadataURI(
      baseuri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    treasuryAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipGranted(address,address)"(
      operator?: string | null,
      target?: string | null
    ): OwnershipGrantedEventFilter;
    OwnershipGranted(
      operator?: string | null,
      target?: string | null
    ): OwnershipGrantedEventFilter;

    "OwnershipRemoved(address,address)"(
      operator?: string | null,
      target?: string | null
    ): OwnershipRemovedEventFilter;
    OwnershipRemoved(
      operator?: string | null,
      target?: string | null
    ): OwnershipRemovedEventFilter;

    "Sale(address,address,uint256)"(
      from?: null,
      to?: null,
      value?: null
    ): SaleEventFilter;
    Sale(from?: null, to?: null, value?: null): SaleEventFilter;
  };

  estimateGas: {
    allObjects(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseMetadataURI(overrides?: CallOverrides): Promise<BigNumber>;

    changeTokenPrice(
      tokenId: BigNumberish,
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    created(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getBaseMetadataURI(overrides?: CallOverrides): Promise<BigNumber>;

    getCreator(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxClaimed(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSize(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(
      targetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeOwner(
      oldOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    royalityFee(overrides?: CallOverrides): Promise<BigNumber>;

    setCreator(
      tokenId: BigNumberish,
      _creator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxClaimed(
      tokenId: BigNumberish,
      newMaxClaimed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRoyalityFee(
      _royalityFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSize(
      tokenId: BigNumberish,
      _size: BaseObject.SizeStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenURI(
      tokenId: BigNumberish,
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setbaseMetadataURI(
      baseuri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allObjects(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseMetadataURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeTokenPrice(
      tokenId: BigNumberish,
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    created(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseMetadataURI(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreator(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxClaimed(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSize(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(
      targetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeOwner(
      oldOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    royalityFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCreator(
      tokenId: BigNumberish,
      _creator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxClaimed(
      tokenId: BigNumberish,
      newMaxClaimed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRoyalityFee(
      _royalityFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSize(
      tokenId: BigNumberish,
      _size: BaseObject.SizeStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenURI(
      tokenId: BigNumberish,
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setbaseMetadataURI(
      baseuri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
