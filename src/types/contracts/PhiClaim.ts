/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace PhiClaim {
  export type CouponStruct = { r: BytesLike; s: BytesLike; v: BigNumberish };

  export type CouponStructOutput = [string, string, number] & {
    r: string;
    s: string;
    v: number;
  };
}

export interface PhiClaimInterface extends utils.Interface {
  functions: {
    "claimObject(uint256,string,(bytes32,bytes32,uint8))": FunctionFragment;
    "claimedLists(address,uint256)": FunctionFragment;
    "getCouponType(string)": FunctionFragment;
    "owner(address)": FunctionFragment;
    "removeOwner(address)": FunctionFragment;
    "setCouponType(string,uint256)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimObject"
      | "claimedLists"
      | "getCouponType"
      | "owner"
      | "removeOwner"
      | "setCouponType"
      | "setOwner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimObject",
    values: [BigNumberish, string, PhiClaim.CouponStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "claimedLists",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCouponType",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values: [string]): string;
  encodeFunctionData(functionFragment: "removeOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setCouponType",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "claimObject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimedLists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCouponType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCouponType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;

  events: {
    "LogClaimObject(address,uint256)": EventFragment;
    "OwnershipGranted(address,address)": EventFragment;
    "OwnershipRemoved(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogClaimObject"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipRemoved"): EventFragment;
}

export interface LogClaimObjectEventObject {
  sender: string;
  tokenid: BigNumber;
}
export type LogClaimObjectEvent = TypedEvent<
  [string, BigNumber],
  LogClaimObjectEventObject
>;

export type LogClaimObjectEventFilter = TypedEventFilter<LogClaimObjectEvent>;

export interface OwnershipGrantedEventObject {
  operator: string;
  target: string;
}
export type OwnershipGrantedEvent = TypedEvent<
  [string, string],
  OwnershipGrantedEventObject
>;

export type OwnershipGrantedEventFilter =
  TypedEventFilter<OwnershipGrantedEvent>;

export interface OwnershipRemovedEventObject {
  operator: string;
  target: string;
}
export type OwnershipRemovedEvent = TypedEvent<
  [string, string],
  OwnershipRemovedEventObject
>;

export type OwnershipRemovedEventFilter =
  TypedEventFilter<OwnershipRemovedEvent>;

export interface PhiClaim extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PhiClaimInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimObject(
      tokenId: BigNumberish,
      condition: string,
      coupon: PhiClaim.CouponStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimedLists(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getCouponType(
      condition: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(
      targetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeOwner(
      oldOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCouponType(
      condition: string,
      tokenid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claimObject(
    tokenId: BigNumberish,
    condition: string,
    coupon: PhiClaim.CouponStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimedLists(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getCouponType(
    condition: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(
    targetAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeOwner(
    oldOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCouponType(
    condition: string,
    tokenid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimObject(
      tokenId: BigNumberish,
      condition: string,
      coupon: PhiClaim.CouponStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    claimedLists(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getCouponType(
      condition: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(targetAddress: string, overrides?: CallOverrides): Promise<boolean>;

    removeOwner(oldOwner: string, overrides?: CallOverrides): Promise<void>;

    setCouponType(
      condition: string,
      tokenid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "LogClaimObject(address,uint256)"(
      sender?: null,
      tokenid?: null
    ): LogClaimObjectEventFilter;
    LogClaimObject(sender?: null, tokenid?: null): LogClaimObjectEventFilter;

    "OwnershipGranted(address,address)"(
      operator?: string | null,
      target?: string | null
    ): OwnershipGrantedEventFilter;
    OwnershipGranted(
      operator?: string | null,
      target?: string | null
    ): OwnershipGrantedEventFilter;

    "OwnershipRemoved(address,address)"(
      operator?: string | null,
      target?: string | null
    ): OwnershipRemovedEventFilter;
    OwnershipRemoved(
      operator?: string | null,
      target?: string | null
    ): OwnershipRemovedEventFilter;
  };

  estimateGas: {
    claimObject(
      tokenId: BigNumberish,
      condition: string,
      coupon: PhiClaim.CouponStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimedLists(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCouponType(
      condition: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(
      targetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeOwner(
      oldOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCouponType(
      condition: string,
      tokenid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimObject(
      tokenId: BigNumberish,
      condition: string,
      coupon: PhiClaim.CouponStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimedLists(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCouponType(
      condition: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(
      targetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeOwner(
      oldOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCouponType(
      condition: string,
      tokenid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
