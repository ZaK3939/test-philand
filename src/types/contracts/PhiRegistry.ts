/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace PhiRegistry {
  export type CouponStruct = { r: BytesLike; s: BytesLike; v: BigNumberish };

  export type CouponStructOutput = [string, string, number] & {
    r: string;
    s: string;
    v: number;
  };
}

export interface PhiRegistryInterface extends utils.Interface {
  functions: {
    "changePhilandOwner(string)": FunctionFragment;
    "claimObject(string,uint256,string,(bytes32,bytes32,uint8))": FunctionFragment;
    "claimed()": FunctionFragment;
    "couponType(string)": FunctionFragment;
    "createPhiland(string)": FunctionFragment;
    "getCouponType(string)": FunctionFragment;
    "label()": FunctionFragment;
    "owner(address)": FunctionFragment;
    "ownerLists(string)": FunctionFragment;
    "removeOwner(address)": FunctionFragment;
    "setCouponType(string,uint256)": FunctionFragment;
    "setEnsBaseNode(bytes32)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "changePhilandOwner"
      | "claimObject"
      | "claimed"
      | "couponType"
      | "createPhiland"
      | "getCouponType"
      | "label"
      | "owner"
      | "ownerLists"
      | "removeOwner"
      | "setCouponType"
      | "setEnsBaseNode"
      | "setOwner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "changePhilandOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimObject",
    values: [string, BigNumberish, string, PhiRegistry.CouponStruct]
  ): string;
  encodeFunctionData(functionFragment: "claimed", values?: undefined): string;
  encodeFunctionData(functionFragment: "couponType", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createPhiland",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCouponType",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "label", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values: [string]): string;
  encodeFunctionData(functionFragment: "ownerLists", values: [string]): string;
  encodeFunctionData(functionFragment: "removeOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setCouponType",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnsBaseNode",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "changePhilandOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimObject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "couponType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createPhiland",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCouponType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "label", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerLists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCouponType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnsBaseNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;

  events: {
    "LogChangePhilandOwner(address,string)": EventFragment;
    "LogClaimObject(string,uint256)": EventFragment;
    "LogCreatePhiland(address,string)": EventFragment;
    "OwnershipGranted(address,address)": EventFragment;
    "OwnershipRemoved(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogChangePhilandOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogClaimObject"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogCreatePhiland"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipRemoved"): EventFragment;
}

export interface LogChangePhilandOwnerEventObject {
  sender: string;
  name: string;
}
export type LogChangePhilandOwnerEvent = TypedEvent<
  [string, string],
  LogChangePhilandOwnerEventObject
>;

export type LogChangePhilandOwnerEventFilter =
  TypedEventFilter<LogChangePhilandOwnerEvent>;

export interface LogClaimObjectEventObject {
  name: string;
  tokenid: BigNumber;
}
export type LogClaimObjectEvent = TypedEvent<
  [string, BigNumber],
  LogClaimObjectEventObject
>;

export type LogClaimObjectEventFilter = TypedEventFilter<LogClaimObjectEvent>;

export interface LogCreatePhilandEventObject {
  sender: string;
  name: string;
}
export type LogCreatePhilandEvent = TypedEvent<
  [string, string],
  LogCreatePhilandEventObject
>;

export type LogCreatePhilandEventFilter =
  TypedEventFilter<LogCreatePhilandEvent>;

export interface OwnershipGrantedEventObject {
  operator: string;
  target: string;
}
export type OwnershipGrantedEvent = TypedEvent<
  [string, string],
  OwnershipGrantedEventObject
>;

export type OwnershipGrantedEventFilter =
  TypedEventFilter<OwnershipGrantedEvent>;

export interface OwnershipRemovedEventObject {
  operator: string;
  target: string;
}
export type OwnershipRemovedEvent = TypedEvent<
  [string, string],
  OwnershipRemovedEventObject
>;

export type OwnershipRemovedEventFilter =
  TypedEventFilter<OwnershipRemovedEvent>;

export interface PhiRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PhiRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    changePhilandOwner(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimObject(
      name: string,
      tokenId: BigNumberish,
      condition: string,
      coupon: PhiRegistry.CouponStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimed(overrides?: CallOverrides): Promise<[BigNumber]>;

    couponType(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    createPhiland(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCouponType(
      condition: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    label(overrides?: CallOverrides): Promise<[string]>;

    owner(
      targetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerLists(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    removeOwner(
      oldOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCouponType(
      condition: string,
      tokenid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEnsBaseNode(
      _basenode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  changePhilandOwner(
    name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimObject(
    name: string,
    tokenId: BigNumberish,
    condition: string,
    coupon: PhiRegistry.CouponStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimed(overrides?: CallOverrides): Promise<BigNumber>;

  couponType(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  createPhiland(
    name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCouponType(
    condition: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  label(overrides?: CallOverrides): Promise<string>;

  owner(
    targetAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerLists(arg0: string, overrides?: CallOverrides): Promise<string>;

  removeOwner(
    oldOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCouponType(
    condition: string,
    tokenid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEnsBaseNode(
    _basenode: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    changePhilandOwner(name: string, overrides?: CallOverrides): Promise<void>;

    claimObject(
      name: string,
      tokenId: BigNumberish,
      condition: string,
      coupon: PhiRegistry.CouponStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    claimed(overrides?: CallOverrides): Promise<BigNumber>;

    couponType(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    createPhiland(name: string, overrides?: CallOverrides): Promise<void>;

    getCouponType(
      condition: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    label(overrides?: CallOverrides): Promise<string>;

    owner(targetAddress: string, overrides?: CallOverrides): Promise<boolean>;

    ownerLists(arg0: string, overrides?: CallOverrides): Promise<string>;

    removeOwner(oldOwner: string, overrides?: CallOverrides): Promise<void>;

    setCouponType(
      condition: string,
      tokenid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEnsBaseNode(
      _basenode: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "LogChangePhilandOwner(address,string)"(
      sender?: string | null,
      name?: null
    ): LogChangePhilandOwnerEventFilter;
    LogChangePhilandOwner(
      sender?: string | null,
      name?: null
    ): LogChangePhilandOwnerEventFilter;

    "LogClaimObject(string,uint256)"(
      name?: null,
      tokenid?: null
    ): LogClaimObjectEventFilter;
    LogClaimObject(name?: null, tokenid?: null): LogClaimObjectEventFilter;

    "LogCreatePhiland(address,string)"(
      sender?: string | null,
      name?: null
    ): LogCreatePhilandEventFilter;
    LogCreatePhiland(
      sender?: string | null,
      name?: null
    ): LogCreatePhilandEventFilter;

    "OwnershipGranted(address,address)"(
      operator?: string | null,
      target?: string | null
    ): OwnershipGrantedEventFilter;
    OwnershipGranted(
      operator?: string | null,
      target?: string | null
    ): OwnershipGrantedEventFilter;

    "OwnershipRemoved(address,address)"(
      operator?: string | null,
      target?: string | null
    ): OwnershipRemovedEventFilter;
    OwnershipRemoved(
      operator?: string | null,
      target?: string | null
    ): OwnershipRemovedEventFilter;
  };

  estimateGas: {
    changePhilandOwner(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimObject(
      name: string,
      tokenId: BigNumberish,
      condition: string,
      coupon: PhiRegistry.CouponStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimed(overrides?: CallOverrides): Promise<BigNumber>;

    couponType(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    createPhiland(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCouponType(
      condition: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    label(overrides?: CallOverrides): Promise<BigNumber>;

    owner(
      targetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerLists(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeOwner(
      oldOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCouponType(
      condition: string,
      tokenid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEnsBaseNode(
      _basenode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    changePhilandOwner(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimObject(
      name: string,
      tokenId: BigNumberish,
      condition: string,
      coupon: PhiRegistry.CouponStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    couponType(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createPhiland(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCouponType(
      condition: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    label(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(
      targetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerLists(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeOwner(
      oldOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCouponType(
      condition: string,
      tokenid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEnsBaseNode(
      _basenode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
