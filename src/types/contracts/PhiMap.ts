/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace PhiMap {
  export type ObjectStruct = {
    contractAddress: string;
    tokenId: BigNumberish;
    xStart: BigNumberish;
    yStart: BigNumberish;
  };

  export type ObjectStructOutput = [string, BigNumber, BigNumber, BigNumber] & {
    contractAddress: string;
    tokenId: BigNumber;
    xStart: BigNumber;
    yStart: BigNumber;
  };

  export type LinkStruct = { title: string; url: string };

  export type LinkStructOutput = [string, string] & {
    title: string;
    url: string;
  };

  export type DepositInfoStruct = {
    contractAddress: string;
    tokenId: BigNumberish;
    amount: BigNumberish;
    used: BigNumberish;
    timestamp: BigNumberish;
  };

  export type DepositInfoStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    contractAddress: string;
    tokenId: BigNumber;
    amount: BigNumber;
    used: BigNumber;
    timestamp: BigNumber;
  };

  export type ObjectInfoStruct = {
    contractAddress: string;
    tokenId: BigNumberish;
    xStart: BigNumberish;
    yStart: BigNumberish;
    xEnd: BigNumberish;
    yEnd: BigNumberish;
    link: PhiMap.LinkStruct;
  };

  export type ObjectInfoStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    PhiMap.LinkStructOutput
  ] & {
    contractAddress: string;
    tokenId: BigNumber;
    xStart: BigNumber;
    yStart: BigNumber;
    xEnd: BigNumber;
    yEnd: BigNumber;
    link: PhiMap.LinkStructOutput;
  };
}

export interface PhiMapInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "batchDeposit(string,address[],uint256[],uint256[])": FunctionFragment;
    "batchRemoveAndWrite(string,uint256[],bool,(address,uint256,uint256,uint256)[],(string,string)[])": FunctionFragment;
    "batchRemoveObjectFromLand(string,uint256[])": FunctionFragment;
    "batchUnDeposit(string,address[],uint256[],uint256[])": FunctionFragment;
    "batchWriteLinkToObject(string,uint256[],(string,string)[])": FunctionFragment;
    "batchWriteObjectToLand(string,(address,uint256,uint256,uint256)[],(string,string)[])": FunctionFragment;
    "changePhilandOwner(string,address)": FunctionFragment;
    "checkAllDepositStatus(string)": FunctionFragment;
    "checkDepositStatus(string,address,uint256)": FunctionFragment;
    "create(string,address)": FunctionFragment;
    "deposit(string,address,uint256,uint256)": FunctionFragment;
    "depositInfo(string,address,uint256)": FunctionFragment;
    "depositTime(string,address,uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialization(string)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "mapSettings()": FunctionFragment;
    "numberOfLand()": FunctionFragment;
    "numberOfObject()": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "ownerLists(string)": FunctionFragment;
    "ownerOfPhiland(string)": FunctionFragment;
    "removeLinkFromObject(string,uint256)": FunctionFragment;
    "removeObjectFromLand(string,uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "save(string,uint256[],bool,(address,uint256,uint256,uint256)[],(string,string)[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unDeposit(string,address,uint256,uint256)": FunctionFragment;
    "userObject(string,uint256)": FunctionFragment;
    "userObjectDeposit(string,uint256)": FunctionFragment;
    "viewLinks(string)": FunctionFragment;
    "viewNumberOfObject()": FunctionFragment;
    "viewNumberOfPhiland()": FunctionFragment;
    "viewObjectLink(string,uint256)": FunctionFragment;
    "viewPhiland(string)": FunctionFragment;
    "writeLinkToObject(string,uint256,(string,string))": FunctionFragment;
    "writeObjectToLand(string,(address,uint256,uint256,uint256),(string,string))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "batchDeposit"
      | "batchRemoveAndWrite"
      | "batchRemoveObjectFromLand"
      | "batchUnDeposit"
      | "batchWriteLinkToObject"
      | "batchWriteObjectToLand"
      | "changePhilandOwner"
      | "checkAllDepositStatus"
      | "checkDepositStatus"
      | "create"
      | "deposit"
      | "depositInfo"
      | "depositTime"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialization"
      | "initialize"
      | "mapSettings"
      | "numberOfLand"
      | "numberOfObject"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "ownerLists"
      | "ownerOfPhiland"
      | "removeLinkFromObject"
      | "removeObjectFromLand"
      | "renounceRole"
      | "revokeRole"
      | "save"
      | "supportsInterface"
      | "unDeposit"
      | "userObject"
      | "userObjectDeposit"
      | "viewLinks"
      | "viewNumberOfObject"
      | "viewNumberOfPhiland"
      | "viewObjectLink"
      | "viewPhiland"
      | "writeLinkToObject"
      | "writeObjectToLand"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchDeposit",
    values: [string, string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchRemoveAndWrite",
    values: [
      string,
      BigNumberish[],
      boolean,
      PhiMap.ObjectStruct[],
      PhiMap.LinkStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchRemoveObjectFromLand",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchUnDeposit",
    values: [string, string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchWriteLinkToObject",
    values: [string, BigNumberish[], PhiMap.LinkStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchWriteObjectToLand",
    values: [string, PhiMap.ObjectStruct[], PhiMap.LinkStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changePhilandOwner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAllDepositStatus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkDepositStatus",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositInfo",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositTime",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialization",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "mapSettings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfLand",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfObject",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "ownerLists", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ownerOfPhiland",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLinkFromObject",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeObjectFromLand",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "save",
    values: [
      string,
      BigNumberish[],
      boolean,
      PhiMap.ObjectStruct[],
      PhiMap.LinkStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unDeposit",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userObject",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userObjectDeposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "viewLinks", values: [string]): string;
  encodeFunctionData(
    functionFragment: "viewNumberOfObject",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewNumberOfPhiland",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewObjectLink",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "viewPhiland", values: [string]): string;
  encodeFunctionData(
    functionFragment: "writeLinkToObject",
    values: [string, BigNumberish, PhiMap.LinkStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "writeObjectToLand",
    values: [string, PhiMap.ObjectStruct, PhiMap.LinkStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchRemoveAndWrite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchRemoveObjectFromLand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchUnDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchWriteLinkToObject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchWriteObjectToLand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePhilandOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAllDepositStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkDepositStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mapSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfLand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfObject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerLists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerOfPhiland",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLinkFromObject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeObjectFromLand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "save", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userObject", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userObjectDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "viewLinks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "viewNumberOfObject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewNumberOfPhiland",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewObjectLink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewPhiland",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "writeLinkToObject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "writeObjectToLand",
    data: BytesLike
  ): Result;

  events: {
    "ChangePhilandOwner(string,address)": EventFragment;
    "CreatedMap(string,address,uint256)": EventFragment;
    "DepositSuccess(address,string,address,uint256,uint256)": EventFragment;
    "Hello()": EventFragment;
    "Initialization(string,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "RemoveLink(string,uint256)": EventFragment;
    "RemoveObject(string,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Save(string,address)": EventFragment;
    "UnDepositSuccess(address,string,address,uint256,uint256)": EventFragment;
    "WriteLink(string,address,uint256,string,string)": EventFragment;
    "WriteObject(string,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangePhilandOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatedMap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositSuccess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Hello"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialization"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLink"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveObject"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Save"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnDepositSuccess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WriteLink"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WriteObject"): EventFragment;
}

export interface ChangePhilandOwnerEventObject {
  name: string;
  sender: string;
}
export type ChangePhilandOwnerEvent = TypedEvent<
  [string, string],
  ChangePhilandOwnerEventObject
>;

export type ChangePhilandOwnerEventFilter =
  TypedEventFilter<ChangePhilandOwnerEvent>;

export interface CreatedMapEventObject {
  name: string;
  sender: string;
  numberOfLand: BigNumber;
}
export type CreatedMapEvent = TypedEvent<
  [string, string, BigNumber],
  CreatedMapEventObject
>;

export type CreatedMapEventFilter = TypedEventFilter<CreatedMapEvent>;

export interface DepositSuccessEventObject {
  sender: string;
  name: string;
  contractAddress: string;
  tokenId: BigNumber;
  amount: BigNumber;
}
export type DepositSuccessEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  DepositSuccessEventObject
>;

export type DepositSuccessEventFilter = TypedEventFilter<DepositSuccessEvent>;

export interface HelloEventObject {}
export type HelloEvent = TypedEvent<[], HelloEventObject>;

export type HelloEventFilter = TypedEventFilter<HelloEvent>;

export interface InitializationEventObject {
  name: string;
  sender: string;
}
export type InitializationEvent = TypedEvent<
  [string, string],
  InitializationEventObject
>;

export type InitializationEventFilter = TypedEventFilter<InitializationEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RemoveLinkEventObject {
  name: string;
  index: BigNumber;
}
export type RemoveLinkEvent = TypedEvent<
  [string, BigNumber],
  RemoveLinkEventObject
>;

export type RemoveLinkEventFilter = TypedEventFilter<RemoveLinkEvent>;

export interface RemoveObjectEventObject {
  name: string;
  index: BigNumber;
}
export type RemoveObjectEvent = TypedEvent<
  [string, BigNumber],
  RemoveObjectEventObject
>;

export type RemoveObjectEventFilter = TypedEventFilter<RemoveObjectEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SaveEventObject {
  name: string;
  sender: string;
}
export type SaveEvent = TypedEvent<[string, string], SaveEventObject>;

export type SaveEventFilter = TypedEventFilter<SaveEvent>;

export interface UnDepositSuccessEventObject {
  sender: string;
  name: string;
  contractAddress: string;
  tokenId: BigNumber;
  amount: BigNumber;
}
export type UnDepositSuccessEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  UnDepositSuccessEventObject
>;

export type UnDepositSuccessEventFilter =
  TypedEventFilter<UnDepositSuccessEvent>;

export interface WriteLinkEventObject {
  name: string;
  contractAddress: string;
  tokenId: BigNumber;
  title: string;
  url: string;
}
export type WriteLinkEvent = TypedEvent<
  [string, string, BigNumber, string, string],
  WriteLinkEventObject
>;

export type WriteLinkEventFilter = TypedEventFilter<WriteLinkEvent>;

export interface WriteObjectEventObject {
  name: string;
  contractAddress: string;
  tokenId: BigNumber;
  xStart: BigNumber;
  yStart: BigNumber;
}
export type WriteObjectEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  WriteObjectEventObject
>;

export type WriteObjectEventFilter = TypedEventFilter<WriteObjectEvent>;

export interface PhiMap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PhiMapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    batchDeposit(
      name: string,
      _contractAddresses: string[],
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchRemoveAndWrite(
      name: string,
      remove_index_array: BigNumberish[],
      remove_check: boolean,
      objectDatas: PhiMap.ObjectStruct[],
      links: PhiMap.LinkStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchRemoveObjectFromLand(
      name: string,
      index_array: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchUnDeposit(
      name: string,
      _contractAddresses: string[],
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchWriteLinkToObject(
      name: string,
      object_indexes: BigNumberish[],
      links: PhiMap.LinkStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchWriteObjectToLand(
      name: string,
      objectData: PhiMap.ObjectStruct[],
      link: PhiMap.LinkStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changePhilandOwner(
      name: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkAllDepositStatus(
      name: string,
      overrides?: CallOverrides
    ): Promise<[PhiMap.DepositInfoStructOutput[]]>;

    checkDepositStatus(
      name: string,
      _contractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[PhiMap.DepositInfoStructOutput]>;

    create(
      name: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      name: string,
      _contractAddress: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositInfo(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        contractAddress: string;
        tokenId: BigNumber;
        amount: BigNumber;
        used: BigNumber;
        timestamp: BigNumber;
      }
    >;

    depositTime(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialization(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mapSettings(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        minX: BigNumber;
        maxX: BigNumber;
        minY: BigNumber;
        maxY: BigNumber;
      }
    >;

    numberOfLand(overrides?: CallOverrides): Promise<[BigNumber]>;

    numberOfObject(overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ownerLists(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    ownerOfPhiland(name: string, overrides?: CallOverrides): Promise<[string]>;

    removeLinkFromObject(
      name: string,
      object_index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeObjectFromLand(
      name: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    save(
      name: string,
      remove_index_array: BigNumberish[],
      remove_check: boolean,
      objectDatas: PhiMap.ObjectStruct[],
      links: PhiMap.LinkStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unDeposit(
      name: string,
      _contractAddress: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userObject(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        PhiMap.LinkStructOutput
      ] & {
        contractAddress: string;
        tokenId: BigNumber;
        xStart: BigNumber;
        yStart: BigNumber;
        xEnd: BigNumber;
        yEnd: BigNumber;
        link: PhiMap.LinkStructOutput;
      }
    >;

    userObjectDeposit(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { contractAddress: string; tokenId: BigNumber }
    >;

    viewLinks(
      name: string,
      overrides?: CallOverrides
    ): Promise<[PhiMap.LinkStructOutput[]]>;

    viewNumberOfObject(overrides?: CallOverrides): Promise<[BigNumber]>;

    viewNumberOfPhiland(overrides?: CallOverrides): Promise<[BigNumber]>;

    viewObjectLink(
      name: string,
      object_index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[PhiMap.LinkStructOutput]>;

    viewPhiland(
      name: string,
      overrides?: CallOverrides
    ): Promise<[PhiMap.ObjectInfoStructOutput[]]>;

    writeLinkToObject(
      name: string,
      object_index: BigNumberish,
      link: PhiMap.LinkStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    writeObjectToLand(
      name: string,
      objectData: PhiMap.ObjectStruct,
      link: PhiMap.LinkStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  batchDeposit(
    name: string,
    _contractAddresses: string[],
    _tokenIds: BigNumberish[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchRemoveAndWrite(
    name: string,
    remove_index_array: BigNumberish[],
    remove_check: boolean,
    objectDatas: PhiMap.ObjectStruct[],
    links: PhiMap.LinkStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchRemoveObjectFromLand(
    name: string,
    index_array: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchUnDeposit(
    name: string,
    _contractAddresses: string[],
    _tokenIds: BigNumberish[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchWriteLinkToObject(
    name: string,
    object_indexes: BigNumberish[],
    links: PhiMap.LinkStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchWriteObjectToLand(
    name: string,
    objectData: PhiMap.ObjectStruct[],
    link: PhiMap.LinkStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changePhilandOwner(
    name: string,
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkAllDepositStatus(
    name: string,
    overrides?: CallOverrides
  ): Promise<PhiMap.DepositInfoStructOutput[]>;

  checkDepositStatus(
    name: string,
    _contractAddress: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<PhiMap.DepositInfoStructOutput>;

  create(
    name: string,
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    name: string,
    _contractAddress: string,
    _tokenId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositInfo(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      contractAddress: string;
      tokenId: BigNumber;
      amount: BigNumber;
      used: BigNumber;
      timestamp: BigNumber;
    }
  >;

  depositTime(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialization(
    name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mapSettings(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      minX: BigNumber;
      maxX: BigNumber;
      minY: BigNumber;
      maxY: BigNumber;
    }
  >;

  numberOfLand(overrides?: CallOverrides): Promise<BigNumber>;

  numberOfObject(overrides?: CallOverrides): Promise<BigNumber>;

  onERC1155BatchReceived(
    operator: string,
    from: string,
    ids: BigNumberish[],
    values: BigNumberish[],
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  onERC1155Received(
    operator: string,
    from: string,
    id: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  ownerLists(arg0: string, overrides?: CallOverrides): Promise<string>;

  ownerOfPhiland(name: string, overrides?: CallOverrides): Promise<string>;

  removeLinkFromObject(
    name: string,
    object_index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeObjectFromLand(
    name: string,
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  save(
    name: string,
    remove_index_array: BigNumberish[],
    remove_check: boolean,
    objectDatas: PhiMap.ObjectStruct[],
    links: PhiMap.LinkStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unDeposit(
    name: string,
    _contractAddress: string,
    _tokenId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userObject(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      PhiMap.LinkStructOutput
    ] & {
      contractAddress: string;
      tokenId: BigNumber;
      xStart: BigNumber;
      yStart: BigNumber;
      xEnd: BigNumber;
      yEnd: BigNumber;
      link: PhiMap.LinkStructOutput;
    }
  >;

  userObjectDeposit(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { contractAddress: string; tokenId: BigNumber }
  >;

  viewLinks(
    name: string,
    overrides?: CallOverrides
  ): Promise<PhiMap.LinkStructOutput[]>;

  viewNumberOfObject(overrides?: CallOverrides): Promise<BigNumber>;

  viewNumberOfPhiland(overrides?: CallOverrides): Promise<BigNumber>;

  viewObjectLink(
    name: string,
    object_index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<PhiMap.LinkStructOutput>;

  viewPhiland(
    name: string,
    overrides?: CallOverrides
  ): Promise<PhiMap.ObjectInfoStructOutput[]>;

  writeLinkToObject(
    name: string,
    object_index: BigNumberish,
    link: PhiMap.LinkStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  writeObjectToLand(
    name: string,
    objectData: PhiMap.ObjectStruct,
    link: PhiMap.LinkStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    batchDeposit(
      name: string,
      _contractAddresses: string[],
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchRemoveAndWrite(
      name: string,
      remove_index_array: BigNumberish[],
      remove_check: boolean,
      objectDatas: PhiMap.ObjectStruct[],
      links: PhiMap.LinkStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchRemoveObjectFromLand(
      name: string,
      index_array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchUnDeposit(
      name: string,
      _contractAddresses: string[],
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchWriteLinkToObject(
      name: string,
      object_indexes: BigNumberish[],
      links: PhiMap.LinkStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchWriteObjectToLand(
      name: string,
      objectData: PhiMap.ObjectStruct[],
      link: PhiMap.LinkStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    changePhilandOwner(
      name: string,
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    checkAllDepositStatus(
      name: string,
      overrides?: CallOverrides
    ): Promise<PhiMap.DepositInfoStructOutput[]>;

    checkDepositStatus(
      name: string,
      _contractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PhiMap.DepositInfoStructOutput>;

    create(
      name: string,
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      name: string,
      _contractAddress: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositInfo(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        contractAddress: string;
        tokenId: BigNumber;
        amount: BigNumber;
        used: BigNumber;
        timestamp: BigNumber;
      }
    >;

    depositTime(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialization(name: string, overrides?: CallOverrides): Promise<void>;

    initialize(_admin: string, overrides?: CallOverrides): Promise<void>;

    mapSettings(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        minX: BigNumber;
        maxX: BigNumber;
        minY: BigNumber;
        maxY: BigNumber;
      }
    >;

    numberOfLand(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfObject(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    ownerLists(arg0: string, overrides?: CallOverrides): Promise<string>;

    ownerOfPhiland(name: string, overrides?: CallOverrides): Promise<string>;

    removeLinkFromObject(
      name: string,
      object_index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeObjectFromLand(
      name: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    save(
      name: string,
      remove_index_array: BigNumberish[],
      remove_check: boolean,
      objectDatas: PhiMap.ObjectStruct[],
      links: PhiMap.LinkStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unDeposit(
      name: string,
      _contractAddress: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userObject(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        PhiMap.LinkStructOutput
      ] & {
        contractAddress: string;
        tokenId: BigNumber;
        xStart: BigNumber;
        yStart: BigNumber;
        xEnd: BigNumber;
        yEnd: BigNumber;
        link: PhiMap.LinkStructOutput;
      }
    >;

    userObjectDeposit(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { contractAddress: string; tokenId: BigNumber }
    >;

    viewLinks(
      name: string,
      overrides?: CallOverrides
    ): Promise<PhiMap.LinkStructOutput[]>;

    viewNumberOfObject(overrides?: CallOverrides): Promise<BigNumber>;

    viewNumberOfPhiland(overrides?: CallOverrides): Promise<BigNumber>;

    viewObjectLink(
      name: string,
      object_index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PhiMap.LinkStructOutput>;

    viewPhiland(
      name: string,
      overrides?: CallOverrides
    ): Promise<PhiMap.ObjectInfoStructOutput[]>;

    writeLinkToObject(
      name: string,
      object_index: BigNumberish,
      link: PhiMap.LinkStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    writeObjectToLand(
      name: string,
      objectData: PhiMap.ObjectStruct,
      link: PhiMap.LinkStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ChangePhilandOwner(string,address)"(
      name?: string | null,
      sender?: string | null
    ): ChangePhilandOwnerEventFilter;
    ChangePhilandOwner(
      name?: string | null,
      sender?: string | null
    ): ChangePhilandOwnerEventFilter;

    "CreatedMap(string,address,uint256)"(
      name?: string | null,
      sender?: string | null,
      numberOfLand?: null
    ): CreatedMapEventFilter;
    CreatedMap(
      name?: string | null,
      sender?: string | null,
      numberOfLand?: null
    ): CreatedMapEventFilter;

    "DepositSuccess(address,string,address,uint256,uint256)"(
      sender?: string | null,
      name?: string | null,
      contractAddress?: null,
      tokenId?: null,
      amount?: null
    ): DepositSuccessEventFilter;
    DepositSuccess(
      sender?: string | null,
      name?: string | null,
      contractAddress?: null,
      tokenId?: null,
      amount?: null
    ): DepositSuccessEventFilter;

    "Hello()"(): HelloEventFilter;
    Hello(): HelloEventFilter;

    "Initialization(string,address)"(
      name?: string | null,
      sender?: string | null
    ): InitializationEventFilter;
    Initialization(
      name?: string | null,
      sender?: string | null
    ): InitializationEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "RemoveLink(string,uint256)"(
      name?: string | null,
      index?: null
    ): RemoveLinkEventFilter;
    RemoveLink(name?: string | null, index?: null): RemoveLinkEventFilter;

    "RemoveObject(string,uint256)"(
      name?: string | null,
      index?: null
    ): RemoveObjectEventFilter;
    RemoveObject(name?: string | null, index?: null): RemoveObjectEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "Save(string,address)"(
      name?: string | null,
      sender?: string | null
    ): SaveEventFilter;
    Save(name?: string | null, sender?: string | null): SaveEventFilter;

    "UnDepositSuccess(address,string,address,uint256,uint256)"(
      sender?: string | null,
      name?: string | null,
      contractAddress?: null,
      tokenId?: null,
      amount?: null
    ): UnDepositSuccessEventFilter;
    UnDepositSuccess(
      sender?: string | null,
      name?: string | null,
      contractAddress?: null,
      tokenId?: null,
      amount?: null
    ): UnDepositSuccessEventFilter;

    "WriteLink(string,address,uint256,string,string)"(
      name?: string | null,
      contractAddress?: null,
      tokenId?: null,
      title?: null,
      url?: null
    ): WriteLinkEventFilter;
    WriteLink(
      name?: string | null,
      contractAddress?: null,
      tokenId?: null,
      title?: null,
      url?: null
    ): WriteLinkEventFilter;

    "WriteObject(string,address,uint256,uint256,uint256)"(
      name?: string | null,
      contractAddress?: null,
      tokenId?: null,
      xStart?: null,
      yStart?: null
    ): WriteObjectEventFilter;
    WriteObject(
      name?: string | null,
      contractAddress?: null,
      tokenId?: null,
      xStart?: null,
      yStart?: null
    ): WriteObjectEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    batchDeposit(
      name: string,
      _contractAddresses: string[],
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchRemoveAndWrite(
      name: string,
      remove_index_array: BigNumberish[],
      remove_check: boolean,
      objectDatas: PhiMap.ObjectStruct[],
      links: PhiMap.LinkStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchRemoveObjectFromLand(
      name: string,
      index_array: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchUnDeposit(
      name: string,
      _contractAddresses: string[],
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchWriteLinkToObject(
      name: string,
      object_indexes: BigNumberish[],
      links: PhiMap.LinkStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchWriteObjectToLand(
      name: string,
      objectData: PhiMap.ObjectStruct[],
      link: PhiMap.LinkStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changePhilandOwner(
      name: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkAllDepositStatus(
      name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkDepositStatus(
      name: string,
      _contractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    create(
      name: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      name: string,
      _contractAddress: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositInfo(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositTime(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialization(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mapSettings(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfLand(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfObject(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerLists(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    ownerOfPhiland(name: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeLinkFromObject(
      name: string,
      object_index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeObjectFromLand(
      name: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    save(
      name: string,
      remove_index_array: BigNumberish[],
      remove_check: boolean,
      objectDatas: PhiMap.ObjectStruct[],
      links: PhiMap.LinkStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unDeposit(
      name: string,
      _contractAddress: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userObject(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userObjectDeposit(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewLinks(name: string, overrides?: CallOverrides): Promise<BigNumber>;

    viewNumberOfObject(overrides?: CallOverrides): Promise<BigNumber>;

    viewNumberOfPhiland(overrides?: CallOverrides): Promise<BigNumber>;

    viewObjectLink(
      name: string,
      object_index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewPhiland(name: string, overrides?: CallOverrides): Promise<BigNumber>;

    writeLinkToObject(
      name: string,
      object_index: BigNumberish,
      link: PhiMap.LinkStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    writeObjectToLand(
      name: string,
      objectData: PhiMap.ObjectStruct,
      link: PhiMap.LinkStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchDeposit(
      name: string,
      _contractAddresses: string[],
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchRemoveAndWrite(
      name: string,
      remove_index_array: BigNumberish[],
      remove_check: boolean,
      objectDatas: PhiMap.ObjectStruct[],
      links: PhiMap.LinkStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchRemoveObjectFromLand(
      name: string,
      index_array: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchUnDeposit(
      name: string,
      _contractAddresses: string[],
      _tokenIds: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchWriteLinkToObject(
      name: string,
      object_indexes: BigNumberish[],
      links: PhiMap.LinkStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchWriteObjectToLand(
      name: string,
      objectData: PhiMap.ObjectStruct[],
      link: PhiMap.LinkStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changePhilandOwner(
      name: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkAllDepositStatus(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkDepositStatus(
      name: string,
      _contractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    create(
      name: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      name: string,
      _contractAddress: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositInfo(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositTime(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialization(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mapSettings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfLand(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfObject(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerLists(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOfPhiland(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLinkFromObject(
      name: string,
      object_index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeObjectFromLand(
      name: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    save(
      name: string,
      remove_index_array: BigNumberish[],
      remove_check: boolean,
      objectDatas: PhiMap.ObjectStruct[],
      links: PhiMap.LinkStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unDeposit(
      name: string,
      _contractAddress: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userObject(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userObjectDeposit(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewLinks(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewNumberOfObject(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewNumberOfPhiland(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewObjectLink(
      name: string,
      object_index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewPhiland(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    writeLinkToObject(
      name: string,
      object_index: BigNumberish,
      link: PhiMap.LinkStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    writeObjectToLand(
      name: string,
      objectData: PhiMap.ObjectStruct,
      link: PhiMap.LinkStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
