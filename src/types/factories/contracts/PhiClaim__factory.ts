/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { PhiClaim, PhiClaimInterface } from "../../contracts/PhiClaim";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "adminSigner",
        type: "address",
      },
      {
        internalType: "contract IPhiObject",
        name: "phiObject",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "AllreadyClaimedObject",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenid",
        type: "uint256",
      },
    ],
    name: "LogClaimObject",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "OwnershipGranted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "OwnershipRemoved",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "condition",
        type: "string",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
        ],
        internalType: "struct PhiClaim.Coupon",
        name: "coupon",
        type: "tuple",
      },
    ],
    name: "claimObject",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "claimedLists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "claimedSoulLists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "couponType",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "condition",
        type: "string",
      },
    ],
    name: "getCouponType",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "targetAddress",
        type: "address",
      },
    ],
    name: "owner",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oldOwner",
        type: "address",
      },
    ],
    name: "removeOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "condition",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "tokenid",
        type: "uint256",
      },
    ],
    name: "setCouponType",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516109a93803806109a983398101604081905261002f91610093565b336000908152602081905260409020805460ff1916600190811790915580546001600160a01b039384166001600160a01b031991821617909155600280549290931691161790556100cd565b6001600160a01b038116811461009057600080fd5b50565b600080604083850312156100a657600080fd5b82516100b18161007b565b60208401519092506100c28161007b565b809150509250929050565b6108cd806100dc6000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063666e1b3911610076578063cb568fd41161005b578063cb568fd414610170578063cfc7ea6214610183578063f69014bf146101b157600080fd5b8063666e1b391461012157806392ca31801461015d57600080fd5b806303cadb6e146100a857806313af4035146100bd578063173825d9146100d0578063523da16f146100e3575b600080fd5b6100bb6100b6366004610655565b6101df565b005b6100bb6100cb366004610725565b610394565b6100bb6100de366004610725565b610411565b61010e6100f1366004610747565b805160208183018101805160058252928201919093012091525481565b6040519081526020015b60405180910390f35b61014d61012f366004610725565b6001600160a01b031660009081526020819052604090205460ff1690565b6040519015158152602001610118565b61010e61016b3660046107f8565b61048b565b6100bb61017e36600461083a565b6104b6565b61014d610191366004610886565b600460209081526000928352604080842090915290825290205460ff1681565b61014d6101bf366004610886565b600360209081526000928352604080842090915290825290205460ff1681565b6000600584846040516101f39291906108b0565b90815260408051918290036020908101832054908301523390820152606001604051602081830303815290604052805190602001209050610234818361050e565b6102855760405162461bcd60e51b815260206004820152600e60248201527f496e76616c696420636f75706f6e00000000000000000000000000000000000060448201526064015b60405180910390fd5b33600090815260036020908152604080832088845290915290205460ff1615156001036102ce57604051636ed7bf2b60e11b81523360048201526024810186905260440161027c565b336000818152600360209081526040808320898452825291829020805460ff19166001179055815192835282018790527fa7257a8b02d81b3fb6715b360a5b4f02dcdc4a4b36e79108b7738ee77706d8cb910160405180910390a160025460405163330343c160e11b8152336004820152602481018790526001600160a01b0390911690636606878290604401600060405180830381600087803b15801561037557600080fd5b505af1158015610389573d6000803e3d6000fd5b505050505050505050565b3360009081526020819052604090205460ff166103c4576040516349e27cff60e01b815260040160405180910390fd5b6001600160a01b038116600081815260208190526040808220805460ff191660011790555133917f619792ba07bec101df538ab277befa333e4cf1c0274f11de7be2a9507b9c9a0691a350565b3360009081526020819052604090205460ff16610441576040516349e27cff60e01b815260040160405180910390fd5b6001600160a01b038116600081815260208190526040808220805460ff191690555133917fc191551a88c5609788f3532bd94c06479b61b0040eec65f9cd985428ffea643091a350565b60006005838360405161049f9291906108b0565b908152602001604051809103902054905092915050565b3360009081526020819052604090205460ff166104e6576040516349e27cff60e01b815260040160405180910390fd5b80600584846040516104f99291906108b0565b90815260405190819003602001902055505050565b60008060018484604001518560000151866020015160405160008152602001604052604051610559949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa15801561057b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166105de5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161027c565b6001546001600160a01b039081169116149392505050565b60008083601f84011261060857600080fd5b50813567ffffffffffffffff81111561062057600080fd5b60208301915083602082850101111561063857600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008084860360a081121561066c57600080fd5b85359450602086013567ffffffffffffffff8082111561068b57600080fd5b61069789838a016105f6565b90965094508491506060603f19840112156106b157600080fd5b604051925060608301915082821081831117156106d0576106d061063f565b506040908152860135815260608601356020820152608086013560ff811681146106f957600080fd5b6040820152939692955090935050565b80356001600160a01b038116811461072057600080fd5b919050565b60006020828403121561073757600080fd5b61074082610709565b9392505050565b60006020828403121561075957600080fd5b813567ffffffffffffffff8082111561077157600080fd5b818401915084601f83011261078557600080fd5b8135818111156107975761079761063f565b604051601f8201601f19908116603f011681019083821181831017156107bf576107bf61063f565b816040528281528760208487010111156107d857600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000806020838503121561080b57600080fd5b823567ffffffffffffffff81111561082257600080fd5b61082e858286016105f6565b90969095509350505050565b60008060006040848603121561084f57600080fd5b833567ffffffffffffffff81111561086657600080fd5b610872868287016105f6565b909790965060209590950135949350505050565b6000806040838503121561089957600080fd5b6108a283610709565b946020939093013593505050565b818382376000910190815291905056fea164736f6c634300080d000a";

type PhiClaimConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PhiClaimConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PhiClaim__factory extends ContractFactory {
  constructor(...args: PhiClaimConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    adminSigner: string,
    phiObject: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PhiClaim> {
    return super.deploy(
      adminSigner,
      phiObject,
      overrides || {}
    ) as Promise<PhiClaim>;
  }
  override getDeployTransaction(
    adminSigner: string,
    phiObject: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(adminSigner, phiObject, overrides || {});
  }
  override attach(address: string): PhiClaim {
    return super.attach(address) as PhiClaim;
  }
  override connect(signer: Signer): PhiClaim__factory {
    return super.connect(signer) as PhiClaim__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PhiClaimInterface {
    return new utils.Interface(_abi) as PhiClaimInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PhiClaim {
    return new Contract(address, _abi, signerOrProvider) as PhiClaim;
  }
}
