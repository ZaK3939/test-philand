/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { PhiClaim, PhiClaimInterface } from "../../contracts/PhiClaim";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "adminSigner",
        type: "address",
      },
      {
        internalType: "contract IPhiObject",
        name: "phiObject",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "AllreadyClaimedObject",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenid",
        type: "uint256",
      },
    ],
    name: "LogClaimObject",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "OwnershipGranted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "OwnershipRemoved",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "condition",
        type: "string",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
        ],
        internalType: "struct PhiClaim.Coupon",
        name: "coupon",
        type: "tuple",
      },
    ],
    name: "claimObject",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "claimedLists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "condition",
        type: "string",
      },
    ],
    name: "getCouponType",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "targetAddress",
        type: "address",
      },
    ],
    name: "owner",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oldOwner",
        type: "address",
      },
    ],
    name: "removeOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "condition",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "tokenid",
        type: "uint256",
      },
    ],
    name: "setCouponType",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161087138038061087183398101604081905261002f91610093565b336000908152602081905260409020805460ff1916600190811790915580546001600160a01b039384166001600160a01b031991821617909155600280549290931691161790556100cd565b6001600160a01b038116811461009057600080fd5b50565b600080604083850312156100a657600080fd5b82516100b18161007b565b60208401519092506100c28161007b565b809150509250929050565b610795806100dc6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063666e1b391161005b578063666e1b39146100bd57806392ca3180146100fe578063cb568fd41461011f578063f69014bf1461013257600080fd5b806303cadb6e1461008257806313af403514610097578063173825d9146100aa575b600080fd5b6100956100903660046105c0565b610160565b005b6100956100a536600461069e565b610315565b6100956100b836600461069e565b610392565b6100e96100cb36600461069e565b6001600160a01b031660009081526020819052604090205460ff1690565b60405190151581526020015b60405180910390f35b61011161010c3660046106c0565b61040c565b6040519081526020016100f5565b61009561012d366004610702565b610437565b6100e961014036600461074e565b600360209081526000928352604080842090915290825290205460ff1681565b600060048484604051610174929190610778565b908152604080519182900360209081018320549083015233908201526060016040516020818303038152906040528051906020012090506101b5818361048f565b6102065760405162461bcd60e51b815260206004820152600e60248201527f496e76616c696420636f75706f6e00000000000000000000000000000000000060448201526064015b60405180910390fd5b33600090815260036020908152604080832088845290915290205460ff16151560010361024f57604051636ed7bf2b60e11b8152336004820152602481018690526044016101fd565b336000818152600360209081526040808320898452825291829020805460ff19166001179055815192835282018790527fa7257a8b02d81b3fb6715b360a5b4f02dcdc4a4b36e79108b7738ee77706d8cb910160405180910390a160025460405163330343c160e11b8152336004820152602481018790526001600160a01b0390911690636606878290604401600060405180830381600087803b1580156102f657600080fd5b505af115801561030a573d6000803e3d6000fd5b505050505050505050565b3360009081526020819052604090205460ff16610345576040516349e27cff60e01b815260040160405180910390fd5b6001600160a01b038116600081815260208190526040808220805460ff191660011790555133917f619792ba07bec101df538ab277befa333e4cf1c0274f11de7be2a9507b9c9a0691a350565b3360009081526020819052604090205460ff166103c2576040516349e27cff60e01b815260040160405180910390fd5b6001600160a01b038116600081815260208190526040808220805460ff191690555133917fc191551a88c5609788f3532bd94c06479b61b0040eec65f9cd985428ffea643091a350565b600060048383604051610420929190610778565b908152602001604051809103902054905092915050565b3360009081526020819052604090205460ff16610467576040516349e27cff60e01b815260040160405180910390fd5b806004848460405161047a929190610778565b90815260405190819003602001902055505050565b600080600184846040015185600001518660200151604051600081526020016040526040516104da949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa1580156104fc573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661055f5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016101fd565b6001546001600160a01b039081169116149392505050565b60008083601f84011261058957600080fd5b50813567ffffffffffffffff8111156105a157600080fd5b6020830191508360208285010111156105b957600080fd5b9250929050565b60008060008084860360a08112156105d757600080fd5b85359450602086013567ffffffffffffffff808211156105f657600080fd5b61060289838a01610577565b90965094508491506060603f198401121561061c57600080fd5b6040519250606083019150828210818311171561064957634e487b7160e01b600052604160045260246000fd5b506040908152860135815260608601356020820152608086013560ff8116811461067257600080fd5b6040820152939692955090935050565b80356001600160a01b038116811461069957600080fd5b919050565b6000602082840312156106b057600080fd5b6106b982610682565b9392505050565b600080602083850312156106d357600080fd5b823567ffffffffffffffff8111156106ea57600080fd5b6106f685828601610577565b90969095509350505050565b60008060006040848603121561071757600080fd5b833567ffffffffffffffff81111561072e57600080fd5b61073a86828701610577565b909790965060209590950135949350505050565b6000806040838503121561076157600080fd5b61076a83610682565b946020939093013593505050565b818382376000910190815291905056fea164736f6c634300080d000a";

type PhiClaimConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PhiClaimConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PhiClaim__factory extends ContractFactory {
  constructor(...args: PhiClaimConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    adminSigner: string,
    phiObject: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PhiClaim> {
    return super.deploy(
      adminSigner,
      phiObject,
      overrides || {}
    ) as Promise<PhiClaim>;
  }
  override getDeployTransaction(
    adminSigner: string,
    phiObject: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(adminSigner, phiObject, overrides || {});
  }
  override attach(address: string): PhiClaim {
    return super.attach(address) as PhiClaim;
  }
  override connect(signer: Signer): PhiClaim__factory {
    return super.connect(signer) as PhiClaim__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PhiClaimInterface {
    return new utils.Interface(_abi) as PhiClaimInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PhiClaim {
    return new Contract(address, _abi, signerOrProvider) as PhiClaim;
  }
}
