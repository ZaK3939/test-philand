/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TestResolver,
  TestResolverInterface,
} from "../../../contracts/ens/TestResolver";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32",
      },
    ],
    name: "addr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "setAddr",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceID",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101cf806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806301ffc9a7146100465780633b3b57de1461006e578063d5fa2b00146100af575b600080fd5b61005961005436600461013c565b610105565b60405190151581526020015b60405180910390f35b61009761007c36600461016d565b6000908152600160205260409020546001600160a01b031690565b6040516001600160a01b039091168152602001610065565b6101036100bd366004610186565b60009182526001602052604090912080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909216919091179055565b005b60006301ffc9a760e01b6001600160e01b0319831614806101365750631d9dabef60e11b6001600160e01b03198316145b92915050565b60006020828403121561014e57600080fd5b81356001600160e01b03198116811461016657600080fd5b9392505050565b60006020828403121561017f57600080fd5b5035919050565b6000806040838503121561019957600080fd5b8235915060208301356001600160a01b03811681146101b757600080fd5b80915050925092905056fea164736f6c634300080d000a";

type TestResolverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestResolverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestResolver__factory extends ContractFactory {
  constructor(...args: TestResolverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestResolver> {
    return super.deploy(overrides || {}) as Promise<TestResolver>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestResolver {
    return super.attach(address) as TestResolver;
  }
  override connect(signer: Signer): TestResolver__factory {
    return super.connect(signer) as TestResolver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestResolverInterface {
    return new utils.Interface(_abi) as TestResolverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestResolver {
    return new Contract(address, _abi, signerOrProvider) as TestResolver;
  }
}
